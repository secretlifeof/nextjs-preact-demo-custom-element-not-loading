{"version":3,"file":"0.js","sources":["webpack:///./components/custom-element.js","webpack:///./components/preact-custom-element.js"],"sourcesContent":["// import { h } from 'preact'\nimport { html } from 'htm/preact'\nimport register from './preact-custom-element'\n// import App from './containers/app'\n// import { EventBus } from './utilities/bus'\n\nconst App = () => {\n  // const { errors } = useForm()\n\n  return html`\n    <div style=${{ padding: '2vw 2vw' }}>\n      <div>c u s t o m</div>\n      <div>e l e m e n t</div>\n    </div>\n  `\n}\n\nif (typeof window !== 'undefined') {\n  register(App, 'womans-day', [])\n  // window.EventBus = new EventBus()\n}\n","import { h, cloneElement, render, hydrate } from 'preact'\n\nexport default function register(Component, tagName, propNames, options) {\n\n\n  function PreactElement() {\n    const inst = Reflect.construct(HTMLElement, [], PreactElement)\n    inst._vdomComponent = Component\n    inst._root =\n      options && options.shadow ? inst.attachShadow({ mode: 'open' }) : inst\n    return inst\n  }\n  PreactElement.prototype = Object.create(HTMLElement.prototype)\n  PreactElement.prototype.constructor = PreactElement\n  PreactElement.prototype.connectedCallback = connectedCallback\n  PreactElement.prototype.attributeChangedCallback = attributeChangedCallback\n  PreactElement.prototype.detachedCallback = detachedCallback\n  PreactElement.observedAttributes =\n    propNames ||\n    Component.observedAttributes ||\n    Object.keys(Component.propTypes || {})\n\n  return customElements.define(\n    tagName || Component.tagName || Component.displayName || Component.name,\n    PreactElement\n  )\n}\n\nfunction connectedCallback() {\n  this._vdom = toVdom(this, this._vdomComponent)\n  ;(this.hasAttribute('hydrate') ? hydrate : render)(this._vdom, this._root)\n}\n\nfunction attributeChangedCallback(name, oldValue, newValue) {\n  if (!this._vdom) return\n  const props = {}\n  props[name] = newValue\n  this._vdom = cloneElement(this._vdom, props)\n  render(this._vdom, this._root)\n}\n\nfunction detachedCallback() {\n  render((this._vdom = null), this._root)\n}\n\nfunction toVdom(element, nodeName) {\n  if (element.nodeType === 3) return element.data\n  if (element.nodeType !== 1) return null\n  let children = [],\n    props = {},\n    i = 0,\n    a = element.attributes,\n    cn = element.childNodes\n  for (i = a.length; i--; ) props[a[i].name] = a[i].value\n  for (i = cn.length; i--; ) children[i] = toVdom(cn[i])\n  return h(nodeName || element.nodeName.toLowerCase(), props, children)\n}\n"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;;;;AADA;AAMA;AACA;AACA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AACA;;;;A","sourceRoot":""}